import json
import numpy as np
import argparse
from sentence_transformers import SentenceTransformer


# ---------------------------
# Embedding generation script
# ---------------------------

def generate_embeddings(metadata_path: str = "arxiv_papers.json", model_name: str = "all-MiniLM-L6-v2", out_file: str = "embeddings.npy"):
    """Generate sentence-transformer embeddings for all abstracts.

    Parameters
    ----------
    metadata_path : str
        Path to the JSON file generated by `arxiv_fetcher.py`.
    model_name : str
        HuggingFace model hub name for the `SentenceTransformer` to use.
    out_file : str
        Where to persist the resulting `numpy.ndarray`.
    """

    with open(metadata_path, "r", encoding="utf-8") as f:
        papers = json.load(f)

    abstracts = [p["abstract"] for p in papers]

    model = SentenceTransformer(model_name)
    embeddings = model.encode(abstracts, batch_size=32, show_progress_bar=True, convert_to_numpy=True, normalize_embeddings=True)

    np.save(out_file, embeddings)
    print(f"[embed] Saved embeddings of shape {embeddings.shape} âžœ {out_file}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate sentence-transformer embeddings for paper abstracts.")
    parser.add_argument("--metadata", default="arxiv_papers.json", help="Path to the JSON file containing paper metadata.")
    parser.add_argument("--model", default="all-MiniLM-L6-v2", help="SentenceTransformer model name.")
    parser.add_argument("--out", default="embeddings.npy", help="Output path for the .npy embeddings file.")

    args = parser.parse_args()
    generate_embeddings(args.metadata, args.model, args.out)